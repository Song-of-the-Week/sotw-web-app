# Example of front end app container, but with reverse proxy to API.

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    server {
        listen 80;
        server_name www.${DOMAIN_NAME};

        return 301 https://${DOMAIN_NAME}$request_uri;
    }
    server {
        listen 80;
        server_name ${DOMAIN_NAME};

        location /health {
            return 200 'OK'; # Simple health check response on HTTP port 80
            add_header Content-Type text/plain;
        }
        location / {
            return 301 https://${DOMAIN_NAME}$request_uri;
        }
    }

    server {
        listen 443 ssl;
        server_name www.${DOMAIN_NAME};

        ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

        return 301 https://${DOMAIN_NAME}$request_uri;
    }
    
    server {
        listen 443 ssl;
        server_name ${DOMAIN_NAME}

        ssl_certificate /etc/letsencrypt/live/${DOMAIN_NAME}/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/${DOMAIN_NAME}/privkey.pem;

        # Example of reverse proxy, separate front end and back end
        location /api/ {
            resolver 127.0.0.11 valid=30s; # Docker DNS
            proxy_pass http://api:8000/api/; # Local back end
            proxy_redirect default;
        }
        # Serve the built front end assets
        location / {
            resolver 127.0.0.11 valid=30s; # Docker DNS
            proxy_pass http://frontend:8080/; # Local back end
            proxy_redirect default;
        }
        location /health {
            access_log off;
            return 200 'OK';
        }
    }

}