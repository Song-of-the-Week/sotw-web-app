# Example of front end app container, but with reverse proxy to API.

user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log  main;
    sendfile        on;
    keepalive_timeout  65;
    gzip  on;

    server {
        listen 80;

        # Example of reverse proxy, separate front end and back end
        location /api/ {
            resolver 127.0.0.11 valid=30s; # Docker DNS
            proxy_pass http://api:8000/api/; # Local back end
            proxy_redirect default;
        }
        # Serve the built front end assets
        location / {
            resolver 127.0.0.11 valid=30s; # Docker DNS
            proxy_pass http://frontend:8080/; # Local back end
            proxy_redirect default;
        }
        location /health {
            access_log off;
            return 200 'OK';
        }
    }
}

# server {
#     listen 443 default_server ssl;
#     server_name example.com;
#     server_tokens off;

#     ssl_certificate     /etc/letsencrypt/live/example.com/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/example.com/privkey.pem;
#     ssl_dhparam         /etc/letsencrypt/dhparams/dhparams.pem;

#     client_max_body_size 32m;

#     location / {
#         proxy_pass http://app:8000;
#         proxy_set_header Host $http_host;
#         proxy_set_header X-Real-IP $remote_addr;
#         proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#         proxy_set_header X-Forwarded-Proto $scheme;
#     }
# }